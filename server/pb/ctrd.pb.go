// Code generated by protoc-gen-go.
// source: ctrd.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	ctrd.proto

It has these top-level messages:
	Empty
	IncrRequest
	GetRequest
	GetReply
	GetAllReply
	Node
	NodesReply
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type IncrRequest struct {
	Event string `protobuf:"bytes,1,opt,name=event" json:"event,omitempty"`
	Times int64  `protobuf:"varint,2,opt,name=times" json:"times,omitempty"`
}

func (m *IncrRequest) Reset()                    { *m = IncrRequest{} }
func (m *IncrRequest) String() string            { return proto.CompactTextString(m) }
func (*IncrRequest) ProtoMessage()               {}
func (*IncrRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *IncrRequest) GetEvent() string {
	if m != nil {
		return m.Event
	}
	return ""
}

func (m *IncrRequest) GetTimes() int64 {
	if m != nil {
		return m.Times
	}
	return 0
}

type GetRequest struct {
	Event string `protobuf:"bytes,1,opt,name=event" json:"event,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetRequest) GetEvent() string {
	if m != nil {
		return m.Event
	}
	return ""
}

type GetReply struct {
	Count int64 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
}

func (m *GetReply) Reset()                    { *m = GetReply{} }
func (m *GetReply) String() string            { return proto.CompactTextString(m) }
func (*GetReply) ProtoMessage()               {}
func (*GetReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetReply) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type GetAllReply struct {
	Counts map[string]int64 `protobuf:"bytes,1,rep,name=counts" json:"counts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
}

func (m *GetAllReply) Reset()                    { *m = GetAllReply{} }
func (m *GetAllReply) String() string            { return proto.CompactTextString(m) }
func (*GetAllReply) ProtoMessage()               {}
func (*GetAllReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetAllReply) GetCounts() map[string]int64 {
	if m != nil {
		return m.Counts
	}
	return nil
}

type Node struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Addr string `protobuf:"bytes,2,opt,name=addr" json:"addr,omitempty"`
	Port int32  `protobuf:"varint,3,opt,name=port" json:"port,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Node) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Node) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *Node) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type NodesReply struct {
	Nodes []*Node `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty"`
}

func (m *NodesReply) Reset()                    { *m = NodesReply{} }
func (m *NodesReply) String() string            { return proto.CompactTextString(m) }
func (*NodesReply) ProtoMessage()               {}
func (*NodesReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *NodesReply) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "pb.Empty")
	proto.RegisterType((*IncrRequest)(nil), "pb.IncrRequest")
	proto.RegisterType((*GetRequest)(nil), "pb.GetRequest")
	proto.RegisterType((*GetReply)(nil), "pb.GetReply")
	proto.RegisterType((*GetAllReply)(nil), "pb.GetAllReply")
	proto.RegisterType((*Node)(nil), "pb.Node")
	proto.RegisterType((*NodesReply)(nil), "pb.NodesReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for CTRD service

type CTRDClient interface {
	// Incr increases event by the given times
	Incr(ctx context.Context, in *IncrRequest, opts ...grpc.CallOption) (*Empty, error)
	// Get shows the count of the given event
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error)
	// Get shows the count of each event hold in this node
	GetAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAllReply, error)
	// Nodes shows the state of the cluster, where this node located
	Nodes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NodesReply, error)
}

type cTRDClient struct {
	cc *grpc.ClientConn
}

func NewCTRDClient(cc *grpc.ClientConn) CTRDClient {
	return &cTRDClient{cc}
}

func (c *cTRDClient) Incr(ctx context.Context, in *IncrRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pb.CTRD/Incr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cTRDClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error) {
	out := new(GetReply)
	err := grpc.Invoke(ctx, "/pb.CTRD/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cTRDClient) GetAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAllReply, error) {
	out := new(GetAllReply)
	err := grpc.Invoke(ctx, "/pb.CTRD/GetAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cTRDClient) Nodes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NodesReply, error) {
	out := new(NodesReply)
	err := grpc.Invoke(ctx, "/pb.CTRD/Nodes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CTRD service

type CTRDServer interface {
	// Incr increases event by the given times
	Incr(context.Context, *IncrRequest) (*Empty, error)
	// Get shows the count of the given event
	Get(context.Context, *GetRequest) (*GetReply, error)
	// Get shows the count of each event hold in this node
	GetAll(context.Context, *Empty) (*GetAllReply, error)
	// Nodes shows the state of the cluster, where this node located
	Nodes(context.Context, *Empty) (*NodesReply, error)
}

func RegisterCTRDServer(s *grpc.Server, srv CTRDServer) {
	s.RegisterService(&_CTRD_serviceDesc, srv)
}

func _CTRD_Incr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CTRDServer).Incr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CTRD/Incr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CTRDServer).Incr(ctx, req.(*IncrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CTRD_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CTRDServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CTRD/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CTRDServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CTRD_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CTRDServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CTRD/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CTRDServer).GetAll(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CTRD_Nodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CTRDServer).Nodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CTRD/Nodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CTRDServer).Nodes(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _CTRD_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CTRD",
	HandlerType: (*CTRDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Incr",
			Handler:    _CTRD_Incr_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _CTRD_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _CTRD_GetAll_Handler,
		},
		{
			MethodName: "Nodes",
			Handler:    _CTRD_Nodes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ctrd.proto",
}

func init() { proto.RegisterFile("ctrd.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 337 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xb1, 0x4e, 0xfb, 0x30,
	0x10, 0xc6, 0xeb, 0x26, 0xe9, 0xbf, 0xbd, 0xfc, 0xd5, 0x22, 0x8b, 0x21, 0x2a, 0x12, 0x8a, 0xac,
	0x82, 0x32, 0xa0, 0x0c, 0xed, 0x42, 0xd9, 0xa0, 0x54, 0x15, 0x0b, 0x83, 0xc5, 0x0b, 0xb4, 0xcd,
	0x0d, 0x88, 0x34, 0x31, 0x89, 0x5b, 0x29, 0x03, 0x0f, 0xc3, 0x9b, 0xa2, 0xb3, 0x1d, 0x88, 0x18,
	0xd8, 0xee, 0xfb, 0xfc, 0xbb, 0xe4, 0xee, 0xb3, 0x01, 0xf6, 0xba, 0xca, 0x52, 0x55, 0x95, 0xba,
	0xe4, 0x7d, 0xb5, 0x13, 0xff, 0x20, 0x58, 0x1f, 0x94, 0x6e, 0xc4, 0x12, 0xc2, 0xa7, 0x62, 0x5f,
	0x49, 0x7c, 0x3f, 0x62, 0xad, 0xf9, 0x39, 0x04, 0x78, 0xc2, 0x42, 0x47, 0x2c, 0x66, 0xc9, 0x48,
	0x5a, 0x41, 0xae, 0x7e, 0x3d, 0x60, 0x1d, 0xf5, 0x63, 0x96, 0x78, 0xd2, 0x0a, 0x21, 0x00, 0x36,
	0xa8, 0xff, 0xec, 0x14, 0x31, 0x0c, 0x0d, 0xa3, 0xf2, 0x86, 0x88, 0x7d, 0x79, 0x74, 0x84, 0x27,
	0xad, 0x10, 0x1f, 0x10, 0x6e, 0x50, 0xdf, 0xe7, 0xb9, 0x85, 0x16, 0x30, 0x30, 0x7e, 0x1d, 0xb1,
	0xd8, 0x4b, 0xc2, 0xf9, 0x45, 0xaa, 0x76, 0x69, 0x07, 0x48, 0x57, 0xe6, 0x74, 0x5d, 0xe8, 0xaa,
	0x91, 0x0e, 0x9d, 0x2e, 0x21, 0xec, 0xd8, 0xfc, 0x0c, 0xbc, 0x37, 0x6c, 0xdc, 0x20, 0x54, 0xd2,
	0xaf, 0x4f, 0xdb, 0xfc, 0x88, 0xed, 0x02, 0x46, 0xdc, 0xf5, 0x6f, 0x99, 0x78, 0x00, 0xff, 0xb9,
	0xcc, 0x90, 0x73, 0xf0, 0x8b, 0xed, 0x01, 0x5d, 0x93, 0xa9, 0xc9, 0xdb, 0x66, 0x59, 0x65, 0x9a,
	0x46, 0xd2, 0xd4, 0xe4, 0xa9, 0xb2, 0xd2, 0x91, 0x17, 0xb3, 0x24, 0x90, 0xa6, 0x16, 0x37, 0x00,
	0xf4, 0x8d, 0xda, 0x6e, 0x70, 0x09, 0x41, 0x41, 0xca, 0x2d, 0x30, 0xa4, 0x05, 0xe8, 0x58, 0x5a,
	0x7b, 0xfe, 0xc9, 0xc0, 0x5f, 0xbd, 0xc8, 0x47, 0x3e, 0x03, 0x9f, 0xa2, 0xe7, 0x13, 0x22, 0x3a,
	0x97, 0x30, 0x1d, 0x91, 0x61, 0xaf, 0xa7, 0xc7, 0xaf, 0xc0, 0xdb, 0xa0, 0xe6, 0x63, 0x97, 0x43,
	0xcb, 0xfc, 0xff, 0xd6, 0x2a, 0x27, 0xec, 0x1a, 0x06, 0x36, 0x25, 0xfe, 0xd3, 0x3d, 0x9d, 0xfc,
	0x0a, 0x4f, 0xf4, 0xf8, 0x0c, 0x02, 0x33, 0x6b, 0x17, 0x1b, 0xb7, 0x23, 0xd6, 0x8e, 0xda, 0x0d,
	0xcc, 0x4b, 0x59, 0x7c, 0x05, 0x00, 0x00, 0xff, 0xff, 0xdf, 0x2f, 0xc8, 0x9f, 0x37, 0x02, 0x00,
	0x00,
}
